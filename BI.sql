
------------ Eliminación de tablas    ------------------

IF OBJECT_ID('LOREM_IPSUM.BI_H_VENTAS','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_H_VENTAS;

IF OBJECT_ID('LOREM_IPSUM.BI_H_PAGOS','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_H_PAGOS;

IF OBJECT_ID('LOREM_IPSUM.BI_H_ENVIOS','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_H_ENVIOS;

IF OBJECT_ID('LOREM_IPSUM.BI_H_PROMOCION','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_H_PROMOCION;

IF OBJECT_ID('LOREM_IPSUM.BI_D_RANGO_ETARIO','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_D_RANGO_ETARIO;

IF OBJECT_ID('LOREM_IPSUM.BI_D_TURNOS','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_D_TURNOS;

IF OBJECT_ID('LOREM_IPSUM.BI_D_UBICACION','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_D_UBICACION;

IF OBJECT_ID('LOREM_IPSUM.BI_D_TIEMPO','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_D_TIEMPO;

IF OBJECT_ID('LOREM_IPSUM.BI_D_SUCURSAL','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_D_SUCURSAL;

IF OBJECT_ID('LOREM_IPSUM.BI_D_MEDIO_PAGO','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_D_MEDIO_PAGO;

IF OBJECT_ID('LOREM_IPSUM.BI_D_CATEGORIA','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_D_CATEGORIA;

IF OBJECT_ID('LOREM_IPSUM.BI_D_SUBCATEGORIA','U') IS NOT NULL
    DROP TABLE LOREM_IPSUM.BI_D_SUBCATEGORIA;
GO

------------ Eliminación de funciones    ------------------

IF OBJECT_ID('LOREM_IPSUM.CALCULAR_TURNO') IS NOT NULL
	DROP FUNCTION LOREM_IPSUM.CALCULAR_TURNO

IF OBJECT_ID('LOREM_IPSUM.CALCULAR_RANGO_ETARIO') IS NOT NULL
	DROP FUNCTION LOREM_IPSUM.CALCULAR_RANGO_ETARIO
GO

------------ Eliminación de procedures    ------------------

IF OBJECT_ID('LOREM_IPSUM.BI_MIGRAR_RANGO_ETARIO','P') IS NOT NULL
DROP PROCEDURE  LOREM_IPSUM.BI_MIGRAR_RANGO_ETARIO

IF OBJECT_ID('LOREM_IPSUM.BI_MIGRAR_TURNOS','P') IS NOT NULL
DROP PROCEDURE  LOREM_IPSUM.BI_MIGRAR_TURNOS

IF OBJECT_ID('LOREM_IPSUM.BI_MIGRAR_UBICACION','P') IS NOT NULL
DROP PROCEDURE  LOREM_IPSUM.BI_MIGRAR_UBICACION

IF OBJECT_ID('LOREM_IPSUM.BI_MIGRAR_SUCURSAL','P') IS NOT NULL
DROP PROCEDURE  LOREM_IPSUM.BI_MIGRAR_SUCURSAL

IF OBJECT_ID('LOREM_IPSUM.BI_MIGRAR_TIEMPO','P') IS NOT NULL
DROP PROCEDURE  LOREM_IPSUM.BI_MIGRAR_TIEMPO

IF OBJECT_ID('LOREM_IPSUM.BI_MIGRAR_VENTAS','P') IS NOT NULL
DROP PROCEDURE  LOREM_IPSUM.BI_MIGRAR_VENTAS
GO

-------------------- Creación de tablas ---------------------------

CREATE TABLE LOREM_IPSUM.BI_D_RANGO_ETARIO(
    RANGO_ETARIO_ID    SMALLINT IDENTITY(1,1) NOT NULL,
    RANGO_ETARIO_DESCRIPCION    NVARCHAR(50)
)



CREATE TABLE LOREM_IPSUM.BI_D_TURNOS(
    TURNO_ID            SMALLINT IDENTITY(1,1) NOT NULL,
    TURNO_DESCRIPCION   NVARCHAR(50)
)


CREATE TABLE LOREM_IPSUM.BI_D_UBICACION(
    UBI_ID              SMALLINT IDENTITY(1,1) NOT NULL,
    UBI_PROVINCIA       NVARCHAR(55),
    UBI_LOCALIDAD       NVARCHAR(55)
)



CREATE TABLE LOREM_IPSUM.BI_D_TIEMPO(
    TIEMPO_ID               SMALLINT IDENTITY(1,1) NOT NULL,
    TIEMPO_ANIO             SMALLINT,
    TIEMPO_CUATRIMESTRE     SMALLINT,
    TIEMPO_MES              SMALLINT
)


CREATE TABLE LOREM_IPSUM.BI_D_SUCURSAL(
    SUCURSAL_ID         SMALLINT IDENTITY(1,1) NOT NULL,
    SUCURSAL_DETALLE    NVARCHAR(255)
)


CREATE TABLE LOREM_IPSUM.BI_D_MEDIO_PAGO(
    MP_ID               INT IDENTITY(1,1) NOT NULL,
    MP_TIPO             INT               NOT NULL,
    MP_DETALLE          NVARCHAR(55)
)


CREATE TABLE LOREM_IPSUM.BI_D_CATEGORIA(
    CAT_ID          SMALLINT IDENTITY(1,1) NOT NULL,
    CAT_NOMBRE      NVARCHAR(50)
)



CREATE TABLE LOREM_IPSUM.BI_D_SUBCATEGORIA(
    SUBCAT_ID       SMALLINT IDENTITY(1,1) NOT NULL,
    SUBCAT_DESC     NVARCHAR(50)
)


CREATE TABLE LOREM_IPSUM.BI_H_VENTAS
(
    VENT_ID                    INT IDENTITY (1,1) NOT NULL,
    VENT_RANGO_ETARIO_CLIENTE  SMALLINT           NOT NULL,
    VENT_RANGO_ETARIO_EMPLEADO SMALLINT           NOT NULL,
    VENT_TIEMPO                SMALLINT           NOT NULL,
    VENT_SUCURSAL              SMALLINT           NOT NULL,
    VENT_UBICACION             SMALLINT           NOT NULL,
    VENT_TURNOS                SMALLINT           NOT NULL,
    VENT_CANTIDAD_PROD         INT,
    VENT_CANTIDAD_VENTAS       INT,
    VENT_MONTO                 DECIMAL(18, 2),
    VENT_DESCUENTO             DECIMAL(18, 2)
)



CREATE TABLE LOREM_IPSUM.BI_H_PAGOS(
    PAGO_ID                     SMALLINT IDENTITY(1,1) NOT NULL,
    PAGO_UBICAION               SMALLINT NOT NULL,
    PAGO_TIEMPO                 SMALLINT NOT NULL,
    PAGO_RANGO_ETARIO_CLIENTE   SMALLINT NOT NULL,
    PAGO_MEDIO_PAGO             INT NOT NULL,
    PAGO_TURNO                  SMALLINT NOT NULL,
    PAGO_SUCURSAL               SMALLINT NOT NULL,
    PAGO_TOTAL                  DECIMAL(18,2) NOT NULL,
    PAGO_CUOTAS                 SMALLINT,
    PAGO_DESCUENTO              DECIMAL(18,2)
)

CREATE TABLE LOREM_IPSUM.BI_H_ENVIOS(
    ENV_ID                      INT IDENTITY(1,1) NOT NULL,
    ENV_UBICACION               SMALLINT NOT NULL,
    ENV_TIEMPO                  SMALLINT NOT NULL,
    ENV_RANGO_ETARIO_CLIENTE    SMALLINT NOT NULL,
    ENV_COSTO                   DECIMAL(18,2) NOT NULL,
    ENV_ATRASADO                BIT NOT NULL
)

CREATE TABLE LOREM_IPSUM.BI_H_PROMOCION(
    PROMO_ID            INT IDENTITY(1,1) NOT NULL,
    PROMO_TIEMPO        SMALLINT NOT NULL,
    PROMO_SUCURSAL      SMALLINT NOT NULL,
    PROMO_UBICACION     SMALLINT NOT NULL,
    PROMO_MONTO         DECIMAL(18,2) NOT NULL,
)

-------------------- Creación de primary keys ---------------------------

ALTER TABLE LOREM_IPSUM.BI_D_RANGO_ETARIO
ADD CONSTRAINT PK_BI_D_RANGO_ETARIO PRIMARY KEY (RANGO_ETARIO_ID);

ALTER TABLE LOREM_IPSUM.BI_D_TURNOS
ADD CONSTRAINT PK_BI_D_TURNOS PRIMARY KEY (TURNO_ID);

ALTER TABLE LOREM_IPSUM.BI_D_UBICACION
ADD CONSTRAINT PK_BI_D_UBICACION PRIMARY KEY (UBI_ID);

ALTER TABLE LOREM_IPSUM.BI_D_TIEMPO
ADD CONSTRAINT PK_BI_D_TIEMPO PRIMARY KEY (TIEMPO_ID);

ALTER TABLE LOREM_IPSUM.BI_D_SUCURSAL
ADD CONSTRAINT PK_BI_D_SUCURSAL PRIMARY KEY (SUCURSAL_ID);

ALTER TABLE LOREM_IPSUM.BI_D_MEDIO_PAGO
ADD CONSTRAINT PK_BI_D_MEDIO_PAGO PRIMARY KEY (MP_ID);

ALTER TABLE LOREM_IPSUM.BI_D_CATEGORIA
ADD CONSTRAINT PK_BI_D_CATEGORIA PRIMARY KEY (CAT_ID);

ALTER TABLE LOREM_IPSUM.BI_D_SUBCATEGORIA
ADD CONSTRAINT PK_BI_D_SUBCATEGORIA PRIMARY KEY (SUBCAT_ID);

ALTER TABLE LOREM_IPSUM.BI_H_ENVIOS
ADD CONSTRAINT PK_BI_H_ENVIOS PRIMARY KEY (ENV_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PAGOS
ADD CONSTRAINT PK_BI_H_PAGOS PRIMARY KEY (PAGO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PROMOCION
ADD CONSTRAINT PK_BI_H_PROMOCION PRIMARY KEY (PROMO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_VENTAS
ADD CONSTRAINT PK_BI_H_VENTAS PRIMARY KEY (VENT_ID);

GO
-------------------- Creación de foreign keys ---------------------------

ALTER TABLE LOREM_IPSUM.BI_H_VENTAS
ADD CONSTRAINT FK_VENT_RANGO_ETARIO_CLIENTE
FOREIGN KEY (VENT_RANGO_ETARIO_CLIENTE) REFERENCES LOREM_IPSUM.BI_D_RANGO_ETARIO(RANGO_ETARIO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_VENTAS
ADD CONSTRAINT FK_VENT_RANGO_ETARIO_EMPLEADO
FOREIGN KEY (VENT_RANGO_ETARIO_EMPLEADO) REFERENCES LOREM_IPSUM.BI_D_RANGO_ETARIO(RANGO_ETARIO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_VENTAS
ADD CONSTRAINT FK_VENT_TIEMPO
FOREIGN KEY (VENT_TIEMPO) REFERENCES LOREM_IPSUM.BI_D_TIEMPO(TIEMPO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_VENTAS
ADD CONSTRAINT FK_VENT_SUCURSAL
FOREIGN KEY (VENT_SUCURSAL) REFERENCES LOREM_IPSUM.BI_D_SUCURSAL(SUCURSAL_ID);

ALTER TABLE LOREM_IPSUM.BI_H_VENTAS
ADD CONSTRAINT FK_VENT_UBICACION
FOREIGN KEY (VENT_UBICACION) REFERENCES LOREM_IPSUM.BI_D_UBICACION(UBI_ID);

ALTER TABLE LOREM_IPSUM.BI_H_VENTAS
ADD CONSTRAINT FK_VENT_TURNOS
FOREIGN KEY (VENT_TURNOS) REFERENCES LOREM_IPSUM.BI_D_TURNOS(TURNO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PAGOS
ADD CONSTRAINT FK_PAGO_UBICACION
FOREIGN KEY (PAGO_UBICAION) REFERENCES LOREM_IPSUM.BI_D_UBICACION(UBI_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PAGOS
ADD CONSTRAINT FK_PAGO_TIEMPO
FOREIGN KEY (PAGO_TIEMPO) REFERENCES LOREM_IPSUM.BI_D_TIEMPO(TIEMPO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PAGOS
ADD CONSTRAINT FK_PAGO_RANGO_ETARIO_CLIENTE
FOREIGN KEY (PAGO_RANGO_ETARIO_CLIENTE) REFERENCES LOREM_IPSUM.BI_D_RANGO_ETARIO(RANGO_ETARIO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PAGOS
ADD CONSTRAINT FK_BI_PAGO_MEDIO_PAGO
FOREIGN KEY (PAGO_MEDIO_PAGO) REFERENCES LOREM_IPSUM.BI_D_MEDIO_PAGO(MP_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PAGOS
ADD CONSTRAINT FK_PAGO_TURNO
FOREIGN KEY (PAGO_TURNO) REFERENCES LOREM_IPSUM.BI_D_TURNOS(TURNO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PAGOS
ADD CONSTRAINT FK_PAGO_SUCURSAL
FOREIGN KEY (PAGO_SUCURSAL) REFERENCES LOREM_IPSUM.BI_D_SUCURSAL(SUCURSAL_ID);

ALTER TABLE LOREM_IPSUM.BI_H_ENVIOS
ADD CONSTRAINT FK_ENV_UBICACION
FOREIGN KEY (ENV_UBICACION) REFERENCES LOREM_IPSUM.BI_D_UBICACION(UBI_ID);

ALTER TABLE LOREM_IPSUM.BI_H_ENVIOS
ADD CONSTRAINT FK_ENV_TIEMPO
FOREIGN KEY (ENV_TIEMPO) REFERENCES LOREM_IPSUM.BI_D_TIEMPO(TIEMPO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_ENVIOS
ADD CONSTRAINT FK_ENV_RANGO_ETARIO_CLIENTE
FOREIGN KEY (ENV_RANGO_ETARIO_CLIENTE) REFERENCES LOREM_IPSUM.BI_D_RANGO_ETARIO(RANGO_ETARIO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PROMOCION
ADD CONSTRAINT FK_PROMO_TIEMPO
FOREIGN KEY (PROMO_TIEMPO) REFERENCES LOREM_IPSUM.BI_D_TIEMPO(TIEMPO_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PROMOCION
ADD CONSTRAINT FK_PROMO_SUCURSAL
FOREIGN KEY (PROMO_SUCURSAL) REFERENCES LOREM_IPSUM.BI_D_SUCURSAL(SUCURSAL_ID);

ALTER TABLE LOREM_IPSUM.BI_H_PROMOCION
ADD CONSTRAINT FK_PROMO_UBICACION
FOREIGN KEY (PROMO_UBICACION) REFERENCES LOREM_IPSUM.BI_D_UBICACION(UBI_ID);

GO

--------------------------- Creacion de funciones  ---------------------------

CREATE FUNCTION LOREM_IPSUM.CALCULAR_RANGO_ETARIO (@FECHA_NACIMIENTO DATE)
RETURNS SMALLINT
AS
BEGIN
    DECLARE @ANIOS INT = DATEDIFF(YEAR, @FECHA_NACIMIENTO, GETDATE())
    DECLARE @RES SMALLINT
    IF @ANIOS < 25
        SET @RES = 1
    ELSE
        IF @ANIOS BETWEEN 25 AND 35
            SET @RES = 2
        ELSE
            IF @ANIOS BETWEEN 35 AND 50
                SET @RES = 3
            ELSE
                IF @ANIOS > 50
                    SET @RES = 4
                ELSE
                    SET @RES = 5
    RETURN @RES
END
GO

CREATE FUNCTION LOREM_IPSUM.CALCULAR_TURNO (@HORARIO DATETIME)
RETURNS SMALLINT
AS
BEGIN
    DECLARE @HORA INT = DATEPART(HOUR, @HORARIO)
    DECLARE @RES SMALLINT
    IF @HORA BETWEEN 8 AND 12
            SET @RES = 1
        ELSE
            IF @HORA BETWEEN 12 AND 16
                SET @RES = 2
            ELSE
                SET @RES = 3
    RETURN @RES
END
GO

--------------------------- Migración de tablas ---------------------------

-- Migración de Rango Etario

CREATE PROCEDURE LOREM_IPSUM.BI_MIGRAR_RANGO_ETARIO
AS
BEGIN
    INSERT INTO BI_D_RANGO_ETARIO(RANGO_ETARIO_DESCRIPCION)
    VALUES ('<25')
    INSERT INTO BI_D_RANGO_ETARIO(RANGO_ETARIO_DESCRIPCION)
    VALUES ('25-35')
    INSERT INTO BI_D_RANGO_ETARIO(RANGO_ETARIO_DESCRIPCION)
    VALUES ('35-50')
    INSERT INTO BI_D_RANGO_ETARIO(RANGO_ETARIO_DESCRIPCION)
    VALUES ('>50')
    INSERT INTO BI_D_RANGO_ETARIO(RANGO_ETARIO_DESCRIPCION)
    VALUES ('DESCONOCIDO')
END
GO


-- Migración de Turnos

CREATE PROCEDURE LOREM_IPSUM.BI_MIGRAR_TURNOS
AS
BEGIN
    INSERT INTO BI_D_TURNOS(TURNO_DESCRIPCION)
    VALUES ('08:00 - 12:00')
    INSERT INTO BI_D_TURNOS(TURNO_DESCRIPCION)
    VALUES ('12:00 - 16:00')
    INSERT INTO BI_D_TURNOS(TURNO_DESCRIPCION)
    VALUES ('16:00 - 20:00')
END
GO

-- Migración Ubicacion

CREATE PROCEDURE LOREM_IPSUM.BI_MIGRAR_UBICACION
AS
BEGIN
    INSERT INTO BI_D_UBICACION(UBI_PROVINCIA, UBI_LOCALIDAD)
        (SELECT prov_nombre, localidad_nombre
         FROM LOREM_IPSUM.Localidad
                  JOIN LOREM_IPSUM.Provincia P ON P.prov_cod = Localidad.localidad_prov)
END
GO

-- Migración Sucursal

CREATE PROCEDURE LOREM_IPSUM.BI_MIGRAR_SUCURSAL
AS
BEGIN
    INSERT INTO BI_D_SUCURSAL(SUCURSAL_DETALLE)
        (SELECT suc_nombre FROM LOREM_IPSUM.Sucursal)
END
GO

-- Migración Tiempo

CREATE PROCEDURE LOREM_IPSUM.BI_MIGRAR_TIEMPO
AS
BEGIN
    -- noinspection SqlShouldBeInGroupBy
    INSERT INTO BI_D_TIEMPO(TIEMPO_ANIO, TIEMPO_CUATRIMESTRE, TIEMPO_MES)
        (SELECT YEAR(ticket_fecha), DATEPART(QUARTER, ticket_fecha), MONTH(ticket_fecha)
         FROM LOREM_IPSUM.Ticket
         GROUP BY YEAR(ticket_fecha), DATEPART(QUARTER, ticket_fecha), MONTH(ticket_fecha)
         UNION
         SELECT YEAR(pago_fecha), DATEPART(QUARTER, pago_fecha), MONTH(pago_fecha)
         FROM LOREM_IPSUM.Pago
         GROUP BY YEAR(pago_fecha), DATEPART(QUARTER, pago_fecha), MONTH(pago_fecha)
         UNION
         SELECT YEAR(prog_env_fecha_programacion),
                DATEPART(QUARTER, prog_env_fecha_programacion),
                MONTH(prog_env_fecha_programacion)
         FROM LOREM_IPSUM.Programacion_Envio
         GROUP BY YEAR(prog_env_fecha_programacion), DATEPART(QUARTER, prog_env_fecha_programacion),
                  MONTH(prog_env_fecha_programacion))
END
GO



-- Migración Ventas

CREATE PROCEDURE LOREM_IPSUM.BI_MIGRAR_VENTAS
AS
BEGIN
    INSERT INTO BI_H_VENTAS(VENT_RANGO_ETARIO_CLIENTE, VENT_RANGO_ETARIO_EMPLEADO, VENT_TIEMPO, VENT_SUCURSAL,
                            VENT_UBICACION, VENT_TURNOS, VENT_CANTIDAD_PROD, VENT_CANTIDAD_VENTAS, VENT_MONTO,
                            VENT_DESCUENTO)
        (SELECT LOREM_IPSUM.CALCULAR_RANGO_ETARIO(CLIENTE.clie_fecha_nacimiento)             AS rango_clie,
                LOREM_IPSUM.CALCULAR_RANGO_ETARIO(EMPLEADO.emp_fecha_nacimiento)             AS rango_empl,
                TIEMPO.TIEMPO_ID,
                BI_SUCURSAL.SUCURSAL_ID,
                UBICACION.UBI_ID,
                LOREM_IPSUM.CALCULAR_TURNO(TICKET.ticket_fecha)                              AS turno,
                SUM(PROD_TICKET.PT_cant)                                                     AS cant_prod,
                COUNT(DISTINCT CAST(TICKET.ticket_nro AS VARCHAR) + CONVERT(VARCHAR, TICKET.ticket_fecha, 120) +
                               CAST(TICKET.ticket_sucursal AS VARCHAR) + TICKET.ticket_tipo) AS cant_vent,
                SUM(DISTINCT TICKET.ticket_total)                                            AS monto,
                SUM(DISTINCT TICKET.ticket_desc_medio_pago + TICKET.ticket_desc_promociones) AS descu
         FROM LOREM_IPSUM.Ticket TICKET
                  LEFT JOIN LOREM_IPSUM.Cliente CLIENTE ON CLIENTE.clie_nro = TICKET.ticket_cliente
                  LEFT JOIN LOREM_IPSUM.Empleado EMPLEADO ON EMPLEADO.emp_dni = TICKET.ticket_empleado
                  JOIN LOREM_IPSUM.BI_D_TIEMPO TIEMPO
                       ON TIEMPO.TIEMPO_ANIO = YEAR(ticket_fecha) AND
                          TIEMPO.TIEMPO_CUATRIMESTRE = DATEPART(Q, ticket_fecha) AND
                          TIEMPO.TIEMPO_MES = MONTH(ticket_fecha)
                  JOIN LOREM_IPSUM.Sucursal SUCURSAL ON SUCURSAL.suc_cod = TICKET.ticket_sucursal
                  JOIN LOREM_IPSUM.BI_D_SUCURSAL BI_SUCURSAL ON BI_SUCURSAL.SUCURSAL_DETALLE = SUCURSAL.suc_nombre
                  JOIN LOREM_IPSUM.Localidad LOCALIDAD ON LOCALIDAD.localidad_cod = SUCURSAL.suc_localidad
                  JOIN LOREM_IPSUM.Provincia PROVINCIA ON PROVINCIA.prov_cod = LOCALIDAD.localidad_prov
                  JOIN LOREM_IPSUM.BI_D_UBICACION UBICACION ON UBICACION.UBI_LOCALIDAD = LOCALIDAD.localidad_nombre AND
                                                               UBICACION.UBI_PROVINCIA = PROVINCIA.prov_nombre
                  JOIN LOREM_IPSUM.Prod_Ticket PROD_TICKET
                       ON TICKET.ticket_nro = PROD_TICKET.PT_ticket AND
                          TICKET.ticket_sucursal = PROD_TICKET.PT_sucursal AND
                          TICKET.ticket_tipo = PROD_TICKET.PT_tipo AND TICKET.ticket_fecha = PROD_TICKET.PT_fecha
         GROUP BY LOREM_IPSUM.CALCULAR_RANGO_ETARIO(CLIENTE.clie_fecha_nacimiento),
                  LOREM_IPSUM.CALCULAR_RANGO_ETARIO(EMPLEADO.emp_fecha_nacimiento),
                  TIEMPO.TIEMPO_ID,
                  BI_SUCURSAL.SUCURSAL_ID,
                  UBICACION.UBI_ID,
                  LOREM_IPSUM.CALCULAR_TURNO(TICKET.ticket_fecha)
         ORDER BY 3, 4)
END
GO



-- Ejecucion de migraciones

EXEC  LOREM_IPSUM.BI_MIGRAR_RANGO_ETARIO
EXEC  LOREM_IPSUM.BI_MIGRAR_TURNOS
EXEC  LOREM_IPSUM.BI_MIGRAR_UBICACION
EXEC  LOREM_IPSUM.BI_MIGRAR_SUCURSAL
EXEC  LOREM_IPSUM.BI_MIGRAR_TIEMPO
EXEC  LOREM_IPSUM.BI_MIGRAR_VENTAS


